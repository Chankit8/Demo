# 使用Espresso和Dagger自动化测试服务
对于测试工具而言,官方推荐使用[Espresso]();
对于模拟数据而言,可以使用依赖注入工具[Dagger](https://google.github.io/dagger/).
> 不像其他的依赖注入器, Dagger2没有使用反射, 而是使用预生成代码的形式提高运行时的执行速度.

###1. 主要的配置依赖环境

(1) Lambda表达式支持.用于支持省略匿名类,简化代码编写.
(2)支持静态编译注解功能.即Androd-Apt包,为将依赖注入所需的注解编译为静态文件提供支持,在编译时处理注解逻辑,避免在运行时处理,提升执行效率.
(3) DataBinding数据绑定支持.用于绑定布局中的资源,直接通过修改数据类的属性,即可修改页面的展示效果
(4) Dagger依赖注入框架.用于注入网络数据.在测试时可以注入模拟的网络数据.将类的实例化与业务逻辑解耦.
(5)RxJava响应式编程用于处理异步逻辑,避免大量的回调冗余和简化常用功能的开发.RxAndroid响应式编程框架是RxJava的扩展.
(6) Retrofit网络库框架,用于处理REST网络访问,简化网络请求的URL设置,异步处理,数据解析工作.异步处理使用RxJava,数据解析使用Gson.
(7) Espresso测试框架.

### Espresso环境搭建
1. 在Android Studio中新建一个Project;
2. 修改Project中App/build.gradle脚本;

  **主要修改3处: 添加Android JUnit Runner测试库和JUnit4 Rules测试库.**
  ```
  	androidTestCompile 'com.android.support.test:runner:0.4.1'
  	androidTestCompile 'com.android.support.test:rules:0.4.1'
  	androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
  ```
在默认配置中指定 test instrumentation runne
```
testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
```
##### Espresso 由 3 个主要的组件构成。
 > ViewMatchers - 在当前的 view 层级中定位一个 view
>ViewActions - 跟你的 view 交互
>ViewAssertions - 给你的 view 设置断言
##### 通过代码实例来分析Exprees的具体功能方法。
1、通过方法onView()可以获取某个控件这个对象，即ViewInteraction。
- **onView()有两个方法来获取对象：**
>withText：通过文本来获取对象
>withId：通过id来获取对象

2、对于ViewInteraction控件的操作，主要通过perform()来实现。
例如：
```
ViewInteraction helloWorldText = onView(ViewMatchers.withId(R.id.bt1));
// Action
helloWorldText.perform(ViewActions.click());
```
3、对控件的验证方法主要有以下方式：
- **匹配通过文本来获取的对象与通过Id来获取的对象**
```
onView(withId(R.id.textToBeChanged))
          .check(matches(withText(STRING_TO_BE_TYPED)));
```
- **检测该控件是否显示**
```
onView(withId(R.id.textToBeChanged))
          .check(ViewAssertions.matches(ViewMatchers.isDisplayed())); 
```

